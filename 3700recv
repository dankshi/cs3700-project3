#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


MSG_SIZE = 1500
TIMEOUT = 30

RECV_PACKETS = {}       # Dictionary of all received packets. key: sequence, value: data

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))


def endConnection():
    """
    When EOF is reached print out data and exit gracefully
    :return:
    """
    for key in sorted(RECV_PACKETS.iterkeys()):
        sys.stdout.write(RECV_PACKETS[key])
    log("[completed]")
    sys.exit(0)


def handleData(decoded, addr):
    """
    If there is data, we accept it and print it out, and send an ack
    """
    sequence = decoded['sequence']

    if sequence not in RECV_PACKETS:
        RECV_PACKETS[sequence] = decoded['data']
        log("[recv data] " + str(decoded['sequence']) + " (" + str(
            len(decoded['data'])) + ") ACCEPTED (in-order)")

    # Send back an ack to the sender
    msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})

    log("ABOUT TO SEND " + msg)

    if sock.sendto(msg, addr) < len(msg):
        log("[error] unable to fully send packet")


def readData():
    """
    Reads data from socket and appropriately handles it
    :return:
    """
    result = sock.recvfrom(MSG_SIZE)

    if result:
        (data, addr) = result

        try:
            decoded = json.loads(data)

            if (decoded['eof']):
                endConnection()

            if (decoded['data']):
                handleData(decoded, addr)

        except (ValueError, KeyError, TypeError) as e:
            log("[recv corrupt packet]")
            raise e
    else:
        log("[error] timeout")
        sys.exit(-1)


# Main loop
while True:
    readData()

#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

packetTimeout = 500  # Dynamic value depenent on RTTs, defaults  to 50ms
MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
sentPackets = {}    # key: SEQUENCE, values: (data, time)
RTTs = []
WINDOW_SIZE = 10000000

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":") + 1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)
sock.setblocking(0)

def currMillis():
    return int(round(time.time() * 1000))


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


def send_next_packet():
    global SEQUENCE

    data = sys.stdin.read(DATA_SIZE)
    if (len(data) > 0):
        msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False, "retransmit": False})
        sentPackets[SEQUENCE] = (data, currMillis())
        SEQUENCE += len(data)

        if sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
        return True
    else:
        return False


def checkTimeout():
    """
    Retransmits packet if it times out
    """
    for key in sentPackets.iterkeys():
        data, time = sentPackets[key]
        if currMillis() - time > packetTimeout:
            msg = json.dumps({"sequence": key, "data": data, "ack": False, "eof": False, "retransmit": True})
            sentPackets[key] = (data, currMillis())
            log("Retransmitting: " + str(key))
            sock.sendto(msg, dest)


def updateRTT(timeSent):
    global packetTimeout
    rtt = currMillis() - timeSent
    RTTs.append(rtt)
    packetTimeout = (sum(RTTs) / float(len(RTTs))) * 2

def endConnection():
    for x in range(0,10):
        sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
    sys.exit(0)

# obligatory send next packet
send_next_packet()

# Now read in data, send packets
while True:
    readable, writable, exceptional = select.select([sock], [], [], float(packetTimeout/1000))
    result = []

    for s in readable:
        result = s.recvfrom(MSG_SIZE)

    checkTimeout()

    if result:
        (data, addr) = result
        #try:
        decoded = json.loads(data)

        # If there is an ack, send next packet
        if decoded['ack'] == SEQUENCE:

            for key in sentPackets.iterkeys():
                adjustedSequence = key + len(sentPackets[key][0])
                if (adjustedSequence == decoded['ack']):
                    ackedPacketKey = key

            ackedPacket = sentPackets.pop(ackedPacketKey, None)

            log("[recv ack] " + str(SEQUENCE))
            log("[recv ack] " + str(SEQUENCE))

            # Update RTT
            if ackedPacket is not None:
                updateRTT(ackedPacket[1])

        #except (ValueError, KeyError, TypeError):
            #log("[recv corrupt packet]")
    #else:
        #log("[error] timeout")
        #sys.exit(-1)

endConnection()

def endConnection():
    """
    Ends the connection
    :return:
    """
    for x in range(0, 10):
        sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
    sys.exit(0)

# obligatory send next packet
send_next_packet()

# Now read in data, send packets
while True:
    readable, writable, exceptional = select.select([sock], [], [], float(packetTimeout/1000))

    packetsReceived = []

    for s in readable:
        packetsReceived.append(s.recvfrom(MSG_SIZE))

    handlePackets(packetsReceived)
    checkTimeout()

    if not sendPackets():
        break

endConnection()

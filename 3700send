#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0
packetTimeout = 1000
sentPackets = []    # tuple(sequence, data, number)

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":") + 1:])
dest = (UDP_IP, UDP_PORT)

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)


def currMillis():
    return int(round(time.time() * 1000))


def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


def send_next_packet():
    global SEQUENCE

    data = sys.stdin.read(DATA_SIZE)
    if (len(data) > 0):
        msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
        sentPackets.append((SEQUENCE, data, currMillis()))
        SEQUENCE += len(data)

        if sock.sendto(msg, dest) < len(msg):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(SEQUENCE) + " (" + str(len(data)) + ")")
        return True
    else:
        return False


def checkTimeout():
    for tuple in sentPackets:
        log("retransmitting")
        seq = tuple[0]
        data = tuple[1]
        time = tuple[2]
        if currMillis() - time > packetTimeout:
            msg = json.dumps({"sequence": seq, "data": data, "ack": False, "eof": False})
            sock.sendto(msg, dest)  # Send first packet

send_next_packet()
# obligatory send next packet

# Now read in data, send packets
while True:
    log("ABOUT TO SLEEP")

    # Check for message timout
    # checkTimeout()

    result = sock.recvfrom(MSG_SIZE)

    if result:
        (data, addr) = result
        try:
            decoded = json.loads(data)

            # If there is an ack, send next packet
            if decoded['ack'] == SEQUENCE:
                log("[recv ack] " + str(SEQUENCE))
                sentPackets = []
                # Try to send next packet; break if no more data
                if (not send_next_packet()):
                    break
        except (ValueError, KeyError, TypeError):
            log("[recv corrupt packet]")
    else:
        log("[error] timeout")
        sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
